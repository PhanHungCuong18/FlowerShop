'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FlowerStore")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCTDatHang(instance As CTDatHang)
    End Sub
  Partial Private Sub UpdateCTDatHang(instance As CTDatHang)
    End Sub
  Partial Private Sub DeleteCTDatHang(instance As CTDatHang)
    End Sub
  Partial Private Sub InsertChuDe(instance As ChuDe)
    End Sub
  Partial Private Sub UpdateChuDe(instance As ChuDe)
    End Sub
  Partial Private Sub DeleteChuDe(instance As ChuDe)
    End Sub
  Partial Private Sub InsertDonDatHang(instance As DonDatHang)
    End Sub
  Partial Private Sub UpdateDonDatHang(instance As DonDatHang)
    End Sub
  Partial Private Sub DeleteDonDatHang(instance As DonDatHang)
    End Sub
  Partial Private Sub InsertKhanhHang(instance As KhanhHang)
    End Sub
  Partial Private Sub UpdateKhanhHang(instance As KhanhHang)
    End Sub
  Partial Private Sub DeleteKhanhHang(instance As KhanhHang)
    End Sub
  Partial Private Sub InsertMauSac(instance As MauSac)
    End Sub
  Partial Private Sub UpdateMauSac(instance As MauSac)
    End Sub
  Partial Private Sub DeleteMauSac(instance As MauSac)
    End Sub
  Partial Private Sub InsertSanPhan(instance As SanPhan)
    End Sub
  Partial Private Sub UpdateSanPhan(instance As SanPhan)
    End Sub
  Partial Private Sub DeleteSanPhan(instance As SanPhan)
    End Sub
  Partial Private Sub InsertNhaCungCap(instance As NhaCungCap)
    End Sub
  Partial Private Sub UpdateNhaCungCap(instance As NhaCungCap)
    End Sub
  Partial Private Sub DeleteNhaCungCap(instance As NhaCungCap)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("FlowerStoreConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CTDatHangs() As System.Data.Linq.Table(Of CTDatHang)
		Get
			Return Me.GetTable(Of CTDatHang)
		End Get
	End Property
	
	Public ReadOnly Property ChuDes() As System.Data.Linq.Table(Of ChuDe)
		Get
			Return Me.GetTable(Of ChuDe)
		End Get
	End Property
	
	Public ReadOnly Property DonDatHangs() As System.Data.Linq.Table(Of DonDatHang)
		Get
			Return Me.GetTable(Of DonDatHang)
		End Get
	End Property
	
	Public ReadOnly Property KhanhHangs() As System.Data.Linq.Table(Of KhanhHang)
		Get
			Return Me.GetTable(Of KhanhHang)
		End Get
	End Property
	
	Public ReadOnly Property MauSacs() As System.Data.Linq.Table(Of MauSac)
		Get
			Return Me.GetTable(Of MauSac)
		End Get
	End Property
	
	Public ReadOnly Property SanPhans() As System.Data.Linq.Table(Of SanPhan)
		Get
			Return Me.GetTable(Of SanPhan)
		End Get
	End Property
	
	Public ReadOnly Property NhaCungCaps() As System.Data.Linq.Table(Of NhaCungCap)
		Get
			Return Me.GetTable(Of NhaCungCap)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CTDatHang")>  _
Partial Public Class CTDatHang
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SoDH As Integer
	
	Private _MaSp As Integer
	
	Private _Soluong As System.Nullable(Of Integer)
	
	Private _DonGia As System.Nullable(Of Double)
	
	Private _DonDatHang As EntityRef(Of DonDatHang)
	
	Private _SanPhan As EntityRef(Of SanPhan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSoDHChanging(value As Integer)
    End Sub
    Partial Private Sub OnSoDHChanged()
    End Sub
    Partial Private Sub OnMaSpChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaSpChanged()
    End Sub
    Partial Private Sub OnSoluongChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSoluongChanged()
    End Sub
    Partial Private Sub OnDonGiaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDonGiaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DonDatHang = CType(Nothing, EntityRef(Of DonDatHang))
		Me._SanPhan = CType(Nothing, EntityRef(Of SanPhan))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoDH", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SoDH() As Integer
		Get
			Return Me._SoDH
		End Get
		Set
			If ((Me._SoDH = value)  _
						= false) Then
				If Me._DonDatHang.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSoDHChanging(value)
				Me.SendPropertyChanging
				Me._SoDH = value
				Me.SendPropertyChanged("SoDH")
				Me.OnSoDHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaSp", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MaSp() As Integer
		Get
			Return Me._MaSp
		End Get
		Set
			If ((Me._MaSp = value)  _
						= false) Then
				If Me._SanPhan.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaSpChanging(value)
				Me.SendPropertyChanging
				Me._MaSp = value
				Me.SendPropertyChanged("MaSp")
				Me.OnMaSpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Soluong", DbType:="Int")>  _
	Public Property Soluong() As System.Nullable(Of Integer)
		Get
			Return Me._Soluong
		End Get
		Set
			If (Me._Soluong.Equals(value) = false) Then
				Me.OnSoluongChanging(value)
				Me.SendPropertyChanging
				Me._Soluong = value
				Me.SendPropertyChanged("Soluong")
				Me.OnSoluongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonGia", DbType:="Float")>  _
	Public Property DonGia() As System.Nullable(Of Double)
		Get
			Return Me._DonGia
		End Get
		Set
			If (Me._DonGia.Equals(value) = false) Then
				Me.OnDonGiaChanging(value)
				Me.SendPropertyChanging
				Me._DonGia = value
				Me.SendPropertyChanged("DonGia")
				Me.OnDonGiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DonDatHang_CTDatHang", Storage:="_DonDatHang", ThisKey:="SoDH", OtherKey:="SoDH", IsForeignKey:=true)>  _
	Public Property DonDatHang() As DonDatHang
		Get
			Return Me._DonDatHang.Entity
		End Get
		Set
			Dim previousValue As DonDatHang = Me._DonDatHang.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DonDatHang.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DonDatHang.Entity = Nothing
					previousValue.CTDatHangs.Remove(Me)
				End If
				Me._DonDatHang.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CTDatHangs.Add(Me)
					Me._SoDH = value.SoDH
				Else
					Me._SoDH = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DonDatHang")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SanPhan_CTDatHang", Storage:="_SanPhan", ThisKey:="MaSp", OtherKey:="MaSP", IsForeignKey:=true)>  _
	Public Property SanPhan() As SanPhan
		Get
			Return Me._SanPhan.Entity
		End Get
		Set
			Dim previousValue As SanPhan = Me._SanPhan.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SanPhan.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SanPhan.Entity = Nothing
					previousValue.CTDatHangs.Remove(Me)
				End If
				Me._SanPhan.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CTDatHangs.Add(Me)
					Me._MaSp = value.MaSP
				Else
					Me._MaSp = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SanPhan")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChuDe")>  _
Partial Public Class ChuDe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaCD As Integer
	
	Private _TenChuDe As String
	
	Private _SanPhans As EntitySet(Of SanPhan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaCDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaCDChanged()
    End Sub
    Partial Private Sub OnTenChuDeChanging(value As String)
    End Sub
    Partial Private Sub OnTenChuDeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SanPhans = New EntitySet(Of SanPhan)(AddressOf Me.attach_SanPhans, AddressOf Me.detach_SanPhans)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaCD", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MaCD() As Integer
		Get
			Return Me._MaCD
		End Get
		Set
			If ((Me._MaCD = value)  _
						= false) Then
				Me.OnMaCDChanging(value)
				Me.SendPropertyChanging
				Me._MaCD = value
				Me.SendPropertyChanged("MaCD")
				Me.OnMaCDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenChuDe", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenChuDe() As String
		Get
			Return Me._TenChuDe
		End Get
		Set
			If (String.Equals(Me._TenChuDe, value) = false) Then
				Me.OnTenChuDeChanging(value)
				Me.SendPropertyChanging
				Me._TenChuDe = value
				Me.SendPropertyChanged("TenChuDe")
				Me.OnTenChuDeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChuDe_SanPhan", Storage:="_SanPhans", ThisKey:="MaCD", OtherKey:="MaCD")>  _
	Public Property SanPhans() As EntitySet(Of SanPhan)
		Get
			Return Me._SanPhans
		End Get
		Set
			Me._SanPhans.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SanPhans(ByVal entity As SanPhan)
		Me.SendPropertyChanging
		entity.ChuDe = Me
	End Sub
	
	Private Sub detach_SanPhans(ByVal entity As SanPhan)
		Me.SendPropertyChanging
		entity.ChuDe = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DonDatHang")>  _
Partial Public Class DonDatHang
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SoDH As Integer
	
	Private _MaKH As System.Nullable(Of Integer)
	
	Private _NgayDH As System.Nullable(Of Date)
	
	Private _NgayGiao As System.Nullable(Of Date)
	
	Private _DaThanhToan As System.Nullable(Of Boolean)
	
	Private _Tinhtranggiaohang As System.Nullable(Of Boolean)
	
	Private _CTDatHangs As EntitySet(Of CTDatHang)
	
	Private _KhanhHang As EntityRef(Of KhanhHang)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSoDHChanging(value As Integer)
    End Sub
    Partial Private Sub OnSoDHChanged()
    End Sub
    Partial Private Sub OnMaKHChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaKHChanged()
    End Sub
    Partial Private Sub OnNgayDHChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNgayDHChanged()
    End Sub
    Partial Private Sub OnNgayGiaoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNgayGiaoChanged()
    End Sub
    Partial Private Sub OnDaThanhToanChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDaThanhToanChanged()
    End Sub
    Partial Private Sub OnTinhtranggiaohangChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTinhtranggiaohangChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CTDatHangs = New EntitySet(Of CTDatHang)(AddressOf Me.attach_CTDatHangs, AddressOf Me.detach_CTDatHangs)
		Me._KhanhHang = CType(Nothing, EntityRef(Of KhanhHang))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoDH", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SoDH() As Integer
		Get
			Return Me._SoDH
		End Get
		Set
			If ((Me._SoDH = value)  _
						= false) Then
				Me.OnSoDHChanging(value)
				Me.SendPropertyChanging
				Me._SoDH = value
				Me.SendPropertyChanged("SoDH")
				Me.OnSoDHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaKH", DbType:="Int")>  _
	Public Property MaKH() As System.Nullable(Of Integer)
		Get
			Return Me._MaKH
		End Get
		Set
			If (Me._MaKH.Equals(value) = false) Then
				If Me._KhanhHang.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaKHChanging(value)
				Me.SendPropertyChanging
				Me._MaKH = value
				Me.SendPropertyChanged("MaKH")
				Me.OnMaKHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NgayDH", DbType:="Date")>  _
	Public Property NgayDH() As System.Nullable(Of Date)
		Get
			Return Me._NgayDH
		End Get
		Set
			If (Me._NgayDH.Equals(value) = false) Then
				Me.OnNgayDHChanging(value)
				Me.SendPropertyChanging
				Me._NgayDH = value
				Me.SendPropertyChanged("NgayDH")
				Me.OnNgayDHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NgayGiao", DbType:="Date")>  _
	Public Property NgayGiao() As System.Nullable(Of Date)
		Get
			Return Me._NgayGiao
		End Get
		Set
			If (Me._NgayGiao.Equals(value) = false) Then
				Me.OnNgayGiaoChanging(value)
				Me.SendPropertyChanging
				Me._NgayGiao = value
				Me.SendPropertyChanged("NgayGiao")
				Me.OnNgayGiaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DaThanhToan", DbType:="Bit")>  _
	Public Property DaThanhToan() As System.Nullable(Of Boolean)
		Get
			Return Me._DaThanhToan
		End Get
		Set
			If (Me._DaThanhToan.Equals(value) = false) Then
				Me.OnDaThanhToanChanging(value)
				Me.SendPropertyChanging
				Me._DaThanhToan = value
				Me.SendPropertyChanged("DaThanhToan")
				Me.OnDaThanhToanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tinhtranggiaohang", DbType:="Bit")>  _
	Public Property Tinhtranggiaohang() As System.Nullable(Of Boolean)
		Get
			Return Me._Tinhtranggiaohang
		End Get
		Set
			If (Me._Tinhtranggiaohang.Equals(value) = false) Then
				Me.OnTinhtranggiaohangChanging(value)
				Me.SendPropertyChanging
				Me._Tinhtranggiaohang = value
				Me.SendPropertyChanged("Tinhtranggiaohang")
				Me.OnTinhtranggiaohangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DonDatHang_CTDatHang", Storage:="_CTDatHangs", ThisKey:="SoDH", OtherKey:="SoDH")>  _
	Public Property CTDatHangs() As EntitySet(Of CTDatHang)
		Get
			Return Me._CTDatHangs
		End Get
		Set
			Me._CTDatHangs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="KhanhHang_DonDatHang", Storage:="_KhanhHang", ThisKey:="MaKH", OtherKey:="MaKH", IsForeignKey:=true)>  _
	Public Property KhanhHang() As KhanhHang
		Get
			Return Me._KhanhHang.Entity
		End Get
		Set
			Dim previousValue As KhanhHang = Me._KhanhHang.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._KhanhHang.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._KhanhHang.Entity = Nothing
					previousValue.DonDatHangs.Remove(Me)
				End If
				Me._KhanhHang.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DonDatHangs.Add(Me)
					Me._MaKH = value.MaKH
				Else
					Me._MaKH = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("KhanhHang")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CTDatHangs(ByVal entity As CTDatHang)
		Me.SendPropertyChanging
		entity.DonDatHang = Me
	End Sub
	
	Private Sub detach_CTDatHangs(ByVal entity As CTDatHang)
		Me.SendPropertyChanging
		entity.DonDatHang = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.KhanhHang")>  _
Partial Public Class KhanhHang
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaKH As Integer
	
	Private _HoTen As String
	
	Private _TaiKhoan As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _DiaChi As String
	
	Private _DT As String
	
	Private _DonDatHangs As EntitySet(Of DonDatHang)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaKHChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaKHChanged()
    End Sub
    Partial Private Sub OnHoTenChanging(value As String)
    End Sub
    Partial Private Sub OnHoTenChanged()
    End Sub
    Partial Private Sub OnTaiKhoanChanging(value As String)
    End Sub
    Partial Private Sub OnTaiKhoanChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDiaChiChanging(value As String)
    End Sub
    Partial Private Sub OnDiaChiChanged()
    End Sub
    Partial Private Sub OnDTChanging(value As String)
    End Sub
    Partial Private Sub OnDTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DonDatHangs = New EntitySet(Of DonDatHang)(AddressOf Me.attach_DonDatHangs, AddressOf Me.detach_DonDatHangs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaKH", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MaKH() As Integer
		Get
			Return Me._MaKH
		End Get
		Set
			If ((Me._MaKH = value)  _
						= false) Then
				Me.OnMaKHChanging(value)
				Me.SendPropertyChanging
				Me._MaKH = value
				Me.SendPropertyChanged("MaKH")
				Me.OnMaKHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HoTen", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HoTen() As String
		Get
			Return Me._HoTen
		End Get
		Set
			If (String.Equals(Me._HoTen, value) = false) Then
				Me.OnHoTenChanging(value)
				Me.SendPropertyChanging
				Me._HoTen = value
				Me.SendPropertyChanged("HoTen")
				Me.OnHoTenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaiKhoan", DbType:="NVarChar(50)")>  _
	Public Property TaiKhoan() As String
		Get
			Return Me._TaiKhoan
		End Get
		Set
			If (String.Equals(Me._TaiKhoan, value) = false) Then
				Me.OnTaiKhoanChanging(value)
				Me.SendPropertyChanging
				Me._TaiKhoan = value
				Me.SendPropertyChanged("TaiKhoan")
				Me.OnTaiKhoanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaChi", DbType:="NVarChar(150)")>  _
	Public Property DiaChi() As String
		Get
			Return Me._DiaChi
		End Get
		Set
			If (String.Equals(Me._DiaChi, value) = false) Then
				Me.OnDiaChiChanging(value)
				Me.SendPropertyChanging
				Me._DiaChi = value
				Me.SendPropertyChanged("DiaChi")
				Me.OnDiaChiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DT", DbType:="VarChar(50)")>  _
	Public Property DT() As String
		Get
			Return Me._DT
		End Get
		Set
			If (String.Equals(Me._DT, value) = false) Then
				Me.OnDTChanging(value)
				Me.SendPropertyChanging
				Me._DT = value
				Me.SendPropertyChanged("DT")
				Me.OnDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="KhanhHang_DonDatHang", Storage:="_DonDatHangs", ThisKey:="MaKH", OtherKey:="MaKH")>  _
	Public Property DonDatHangs() As EntitySet(Of DonDatHang)
		Get
			Return Me._DonDatHangs
		End Get
		Set
			Me._DonDatHangs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DonDatHangs(ByVal entity As DonDatHang)
		Me.SendPropertyChanging
		entity.KhanhHang = Me
	End Sub
	
	Private Sub detach_DonDatHangs(ByVal entity As DonDatHang)
		Me.SendPropertyChanging
		entity.KhanhHang = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MauSac")>  _
Partial Public Class MauSac
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaMau As String
	
	Private _TenMau As String
	
	Private _SanPhans As EntitySet(Of SanPhan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaMauChanging(value As String)
    End Sub
    Partial Private Sub OnMaMauChanged()
    End Sub
    Partial Private Sub OnTenMauChanging(value As String)
    End Sub
    Partial Private Sub OnTenMauChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SanPhans = New EntitySet(Of SanPhan)(AddressOf Me.attach_SanPhans, AddressOf Me.detach_SanPhans)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaMau", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaMau() As String
		Get
			Return Me._MaMau
		End Get
		Set
			If (String.Equals(Me._MaMau, value) = false) Then
				Me.OnMaMauChanging(value)
				Me.SendPropertyChanging
				Me._MaMau = value
				Me.SendPropertyChanged("MaMau")
				Me.OnMaMauChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenMau", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenMau() As String
		Get
			Return Me._TenMau
		End Get
		Set
			If (String.Equals(Me._TenMau, value) = false) Then
				Me.OnTenMauChanging(value)
				Me.SendPropertyChanging
				Me._TenMau = value
				Me.SendPropertyChanged("TenMau")
				Me.OnTenMauChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MauSac_SanPhan", Storage:="_SanPhans", ThisKey:="MaMau", OtherKey:="MaMau")>  _
	Public Property SanPhans() As EntitySet(Of SanPhan)
		Get
			Return Me._SanPhans
		End Get
		Set
			Me._SanPhans.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SanPhans(ByVal entity As SanPhan)
		Me.SendPropertyChanging
		entity.MauSac = Me
	End Sub
	
	Private Sub detach_SanPhans(ByVal entity As SanPhan)
		Me.SendPropertyChanging
		entity.MauSac = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SanPhan")>  _
Partial Public Class SanPhan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaSP As Integer
	
	Private _TenSP As String
	
	Private _Gia As System.Nullable(Of Double)
	
	Private _Mota As String
	
	Private _AnhSP As String
	
	Private _MaNCC As System.Nullable(Of Integer)
	
	Private _NgayUpdate As System.Nullable(Of Date)
	
	Private _Soluong As System.Nullable(Of Integer)
	
	Private _MaCD As System.Nullable(Of Integer)
	
	Private _MaMau As String
	
	Private _CTDatHangs As EntitySet(Of CTDatHang)
	
	Private _ChuDe As EntityRef(Of ChuDe)
	
	Private _MauSac As EntityRef(Of MauSac)
	
	Private _NhaCungCap As EntityRef(Of NhaCungCap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaSPChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaSPChanged()
    End Sub
    Partial Private Sub OnTenSPChanging(value As String)
    End Sub
    Partial Private Sub OnTenSPChanged()
    End Sub
    Partial Private Sub OnGiaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnGiaChanged()
    End Sub
    Partial Private Sub OnMotaChanging(value As String)
    End Sub
    Partial Private Sub OnMotaChanged()
    End Sub
    Partial Private Sub OnAnhSPChanging(value As String)
    End Sub
    Partial Private Sub OnAnhSPChanged()
    End Sub
    Partial Private Sub OnMaNCCChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaNCCChanged()
    End Sub
    Partial Private Sub OnNgayUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNgayUpdateChanged()
    End Sub
    Partial Private Sub OnSoluongChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSoluongChanged()
    End Sub
    Partial Private Sub OnMaCDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaCDChanged()
    End Sub
    Partial Private Sub OnMaMauChanging(value As String)
    End Sub
    Partial Private Sub OnMaMauChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CTDatHangs = New EntitySet(Of CTDatHang)(AddressOf Me.attach_CTDatHangs, AddressOf Me.detach_CTDatHangs)
		Me._ChuDe = CType(Nothing, EntityRef(Of ChuDe))
		Me._MauSac = CType(Nothing, EntityRef(Of MauSac))
		Me._NhaCungCap = CType(Nothing, EntityRef(Of NhaCungCap))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaSP", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MaSP() As Integer
		Get
			Return Me._MaSP
		End Get
		Set
			If ((Me._MaSP = value)  _
						= false) Then
				Me.OnMaSPChanging(value)
				Me.SendPropertyChanging
				Me._MaSP = value
				Me.SendPropertyChanged("MaSP")
				Me.OnMaSPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenSP", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenSP() As String
		Get
			Return Me._TenSP
		End Get
		Set
			If (String.Equals(Me._TenSP, value) = false) Then
				Me.OnTenSPChanging(value)
				Me.SendPropertyChanging
				Me._TenSP = value
				Me.SendPropertyChanged("TenSP")
				Me.OnTenSPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gia", DbType:="Float")>  _
	Public Property Gia() As System.Nullable(Of Double)
		Get
			Return Me._Gia
		End Get
		Set
			If (Me._Gia.Equals(value) = false) Then
				Me.OnGiaChanging(value)
				Me.SendPropertyChanging
				Me._Gia = value
				Me.SendPropertyChanged("Gia")
				Me.OnGiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mota", DbType:="NVarChar(MAX)")>  _
	Public Property Mota() As String
		Get
			Return Me._Mota
		End Get
		Set
			If (String.Equals(Me._Mota, value) = false) Then
				Me.OnMotaChanging(value)
				Me.SendPropertyChanging
				Me._Mota = value
				Me.SendPropertyChanged("Mota")
				Me.OnMotaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnhSP", DbType:="VarChar(50)")>  _
	Public Property AnhSP() As String
		Get
			Return Me._AnhSP
		End Get
		Set
			If (String.Equals(Me._AnhSP, value) = false) Then
				Me.OnAnhSPChanging(value)
				Me.SendPropertyChanging
				Me._AnhSP = value
				Me.SendPropertyChanged("AnhSP")
				Me.OnAnhSPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaNCC", DbType:="Int")>  _
	Public Property MaNCC() As System.Nullable(Of Integer)
		Get
			Return Me._MaNCC
		End Get
		Set
			If (Me._MaNCC.Equals(value) = false) Then
				If Me._NhaCungCap.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaNCCChanging(value)
				Me.SendPropertyChanging
				Me._MaNCC = value
				Me.SendPropertyChanged("MaNCC")
				Me.OnMaNCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NgayUpdate", DbType:="Date")>  _
	Public Property NgayUpdate() As System.Nullable(Of Date)
		Get
			Return Me._NgayUpdate
		End Get
		Set
			If (Me._NgayUpdate.Equals(value) = false) Then
				Me.OnNgayUpdateChanging(value)
				Me.SendPropertyChanging
				Me._NgayUpdate = value
				Me.SendPropertyChanged("NgayUpdate")
				Me.OnNgayUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Soluong", DbType:="Int")>  _
	Public Property Soluong() As System.Nullable(Of Integer)
		Get
			Return Me._Soluong
		End Get
		Set
			If (Me._Soluong.Equals(value) = false) Then
				Me.OnSoluongChanging(value)
				Me.SendPropertyChanging
				Me._Soluong = value
				Me.SendPropertyChanged("Soluong")
				Me.OnSoluongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaCD", DbType:="Int")>  _
	Public Property MaCD() As System.Nullable(Of Integer)
		Get
			Return Me._MaCD
		End Get
		Set
			If (Me._MaCD.Equals(value) = false) Then
				If Me._ChuDe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaCDChanging(value)
				Me.SendPropertyChanging
				Me._MaCD = value
				Me.SendPropertyChanged("MaCD")
				Me.OnMaCDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaMau", DbType:="NChar(10)")>  _
	Public Property MaMau() As String
		Get
			Return Me._MaMau
		End Get
		Set
			If (String.Equals(Me._MaMau, value) = false) Then
				If Me._MauSac.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaMauChanging(value)
				Me.SendPropertyChanging
				Me._MaMau = value
				Me.SendPropertyChanged("MaMau")
				Me.OnMaMauChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SanPhan_CTDatHang", Storage:="_CTDatHangs", ThisKey:="MaSP", OtherKey:="MaSp")>  _
	Public Property CTDatHangs() As EntitySet(Of CTDatHang)
		Get
			Return Me._CTDatHangs
		End Get
		Set
			Me._CTDatHangs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChuDe_SanPhan", Storage:="_ChuDe", ThisKey:="MaCD", OtherKey:="MaCD", IsForeignKey:=true)>  _
	Public Property ChuDe() As ChuDe
		Get
			Return Me._ChuDe.Entity
		End Get
		Set
			Dim previousValue As ChuDe = Me._ChuDe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChuDe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChuDe.Entity = Nothing
					previousValue.SanPhans.Remove(Me)
				End If
				Me._ChuDe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SanPhans.Add(Me)
					Me._MaCD = value.MaCD
				Else
					Me._MaCD = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ChuDe")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MauSac_SanPhan", Storage:="_MauSac", ThisKey:="MaMau", OtherKey:="MaMau", IsForeignKey:=true)>  _
	Public Property MauSac() As MauSac
		Get
			Return Me._MauSac.Entity
		End Get
		Set
			Dim previousValue As MauSac = Me._MauSac.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MauSac.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MauSac.Entity = Nothing
					previousValue.SanPhans.Remove(Me)
				End If
				Me._MauSac.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SanPhans.Add(Me)
					Me._MaMau = value.MaMau
				Else
					Me._MaMau = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MauSac")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NhaCungCap_SanPhan", Storage:="_NhaCungCap", ThisKey:="MaNCC", OtherKey:="MaNCC", IsForeignKey:=true)>  _
	Public Property NhaCungCap() As NhaCungCap
		Get
			Return Me._NhaCungCap.Entity
		End Get
		Set
			Dim previousValue As NhaCungCap = Me._NhaCungCap.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NhaCungCap.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NhaCungCap.Entity = Nothing
					previousValue.SanPhans.Remove(Me)
				End If
				Me._NhaCungCap.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SanPhans.Add(Me)
					Me._MaNCC = value.MaNCC
				Else
					Me._MaNCC = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NhaCungCap")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CTDatHangs(ByVal entity As CTDatHang)
		Me.SendPropertyChanging
		entity.SanPhan = Me
	End Sub
	
	Private Sub detach_CTDatHangs(ByVal entity As CTDatHang)
		Me.SendPropertyChanging
		entity.SanPhan = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NhaCungCap")>  _
Partial Public Class NhaCungCap
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaNCC As Integer
	
	Private _TenNCC As String
	
	Private _DiaChi As String
	
	Private _SDT As String
	
	Private _SanPhans As EntitySet(Of SanPhan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaNCCChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaNCCChanged()
    End Sub
    Partial Private Sub OnTenNCCChanging(value As String)
    End Sub
    Partial Private Sub OnTenNCCChanged()
    End Sub
    Partial Private Sub OnDiaChiChanging(value As String)
    End Sub
    Partial Private Sub OnDiaChiChanged()
    End Sub
    Partial Private Sub OnSDTChanging(value As String)
    End Sub
    Partial Private Sub OnSDTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SanPhans = New EntitySet(Of SanPhan)(AddressOf Me.attach_SanPhans, AddressOf Me.detach_SanPhans)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaNCC", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MaNCC() As Integer
		Get
			Return Me._MaNCC
		End Get
		Set
			If ((Me._MaNCC = value)  _
						= false) Then
				Me.OnMaNCCChanging(value)
				Me.SendPropertyChanging
				Me._MaNCC = value
				Me.SendPropertyChanged("MaNCC")
				Me.OnMaNCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenNCC", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenNCC() As String
		Get
			Return Me._TenNCC
		End Get
		Set
			If (String.Equals(Me._TenNCC, value) = false) Then
				Me.OnTenNCCChanging(value)
				Me.SendPropertyChanging
				Me._TenNCC = value
				Me.SendPropertyChanged("TenNCC")
				Me.OnTenNCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaChi", DbType:="NVarChar(150)")>  _
	Public Property DiaChi() As String
		Get
			Return Me._DiaChi
		End Get
		Set
			If (String.Equals(Me._DiaChi, value) = false) Then
				Me.OnDiaChiChanging(value)
				Me.SendPropertyChanging
				Me._DiaChi = value
				Me.SendPropertyChanged("DiaChi")
				Me.OnDiaChiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SDT", DbType:="NVarChar(50)")>  _
	Public Property SDT() As String
		Get
			Return Me._SDT
		End Get
		Set
			If (String.Equals(Me._SDT, value) = false) Then
				Me.OnSDTChanging(value)
				Me.SendPropertyChanging
				Me._SDT = value
				Me.SendPropertyChanged("SDT")
				Me.OnSDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NhaCungCap_SanPhan", Storage:="_SanPhans", ThisKey:="MaNCC", OtherKey:="MaNCC")>  _
	Public Property SanPhans() As EntitySet(Of SanPhan)
		Get
			Return Me._SanPhans
		End Get
		Set
			Me._SanPhans.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SanPhans(ByVal entity As SanPhan)
		Me.SendPropertyChanging
		entity.NhaCungCap = Me
	End Sub
	
	Private Sub detach_SanPhans(ByVal entity As SanPhan)
		Me.SendPropertyChanging
		entity.NhaCungCap = Nothing
	End Sub
End Class
